import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { useState, useEffect, useMemo } from "react";
import { Trash2, Loader2, AlertCircle, Download, RefreshCw } from "lucide-react";
import './QrCodeSection.css';
export const QrCodeSection = ({ qrCodes, latestQrCode, onDownload, onDelete, onRefresh }) => {
    const [deleteId, setDeleteId] = useState(null);
    const [imageStatus, setImageStatus] = useState({});
    const [latestQrStatus, setLatestQrStatus] = useState('loading');
    // Memoize expired checks to prevent unnecessary recalculations
    const expiredStatus = useMemo(() => {
        return qrCodes.reduce((acc, qr) => {
            acc[qr.id] = qr.expires_at ? new Date(qr.expires_at) < new Date() : false;
            return acc;
        }, {});
    }, [qrCodes]);
    // Initialize image statuses
    useEffect(() => {
        const initialStatus = {};
        qrCodes.forEach(qr => {
            initialStatus[qr.id] = 'loading';
        });
        setImageStatus(initialStatus);
    }, [qrCodes]);
    // Reset latest QR code status when it changes
    useEffect(() => {
        if (latestQrCode) {
            setLatestQrStatus('loading');
        }
    }, [latestQrCode]);
    return (_jsx("div", { className: "qr-section", children: _jsxs("div", { className: "qr-section__container", children: [latestQrCode && (_jsx("div", { className: "qr-card", children: _jsxs("div", { className: "qr-card__content", children: [_jsxs("div", { className: "qr-card__header", children: [_jsxs("div", { className: "qr-card__title-section", children: [_jsx("div", { className: "qr-card__status-indicator" }), _jsx("h2", { className: "qr-card__title", children: "Latest Attendance QR Code" })] }), onRefresh && (_jsxs("button", { onClick: onRefresh, className: "qr-button qr-button--secondary", children: [_jsx(RefreshCw, { className: "qr-icon" }), "Refresh List"] }))] }), _jsxs("div", { className: "qr-preview", children: [_jsx("div", { className: "qr-preview__overlay" }), latestQrStatus === 'loading' && (_jsxs("div", { className: "qr-preview__loading", children: [_jsx(Loader2, { className: "qr-icon qr-icon--spinning" }), _jsx("span", { className: "qr-preview__loading-text", children: "Loading QR Code..." })] })), latestQrStatus === 'error' ? (_jsxs("div", { className: "qr-preview__error", children: [_jsx("div", { className: "qr-preview__error-icon", children: _jsx(AlertCircle, { className: "qr-icon" }) }), _jsx("span", { className: "qr-preview__error-text", children: "Failed to load QR code" }), _jsx("button", { onClick: () => setLatestQrStatus('loading'), className: "qr-button qr-button--primary qr-button--small", children: "Try Again" })] })) : (_jsx("img", { src: latestQrCode.url, alt: `QR Code for ${latestQrCode.session}`, className: `qr-preview__image ${latestQrStatus !== 'loaded' ? 'invisible' : ''}`, onLoad: () => setLatestQrStatus('loaded'), onError: () => {
                                            console.error('Failed to load latest QR code:', latestQrCode.url);
                                            setLatestQrStatus('error');
                                        }, crossOrigin: "anonymous", loading: "eager" }))] }), _jsx("div", { className: "qr-card__actions", children: _jsxs("button", { onClick: () => onDownload(latestQrCode.id), disabled: latestQrStatus !== 'loaded', className: `qr-button qr-button--primary ${latestQrStatus !== 'loaded' ? 'qr-button--disabled' : ''}`, children: [_jsx(Download, { className: "qr-icon" }), "Download QR Code"] }) }), _jsx("div", { className: "qr-card__info", children: _jsxs("div", { className: "qr-card__info-grid", children: [_jsxs("div", { className: "qr-card__info-item", children: [_jsx("span", { className: "qr-card__info-label", children: "Session" }), _jsx("span", { className: "qr-card__info-value", children: latestQrCode.session })] }), _jsxs("div", { className: "qr-card__info-item", children: [_jsx("span", { className: "qr-card__info-label", children: "Created" }), _jsx("span", { className: "qr-card__info-value", children: latestQrCode.created_at })] }), latestQrCode.expires_at && (_jsxs("div", { className: "qr-card__info-item", children: [_jsx("span", { className: "qr-card__info-label", children: expiredStatus[latestQrCode.id] ? "Status" : "Expires" }), _jsx("span", { className: `qr-card__info-value ${expiredStatus[latestQrCode.id] ? "qr-card__info-value--error" : "qr-card__info-value--success"}`, children: expiredStatus[latestQrCode.id] ? (_jsxs(_Fragment, { children: [_jsx("span", { className: "qr-card__status-dot qr-card__status-dot--error" }), "Expired"] })) : (_jsxs(_Fragment, { children: [_jsx("span", { className: "qr-card__status-dot qr-card__status-dot--success" }), latestQrCode.expires_at] })) })] }))] }) })] }) })), _jsxs("div", { className: "qr-card", children: [_jsxs("div", { className: "qr-card__header qr-card__header--center", children: [_jsxs("div", { className: "qr-card__title-section", children: [_jsx("div", { className: "qr-card__icon-wrapper", children: _jsx("span", { className: "qr-card__icon", children: "\uD83D\uDCDA" }) }), _jsx("h3", { className: "qr-card__title qr-card__title--small", children: "All QR Codes" })] }), _jsx("div", { className: "qr-card__count", children: _jsxs("span", { children: [qrCodes.length, " codes"] }) })] }), qrCodes.length === 0 ? (_jsx("div", { className: "qr-card__empty", children: _jsxs("div", { className: "qr-card__empty-content", children: [_jsx("div", { className: "qr-card__empty-icon", children: "\uD83C\uDFAF" }), _jsx("h3", { className: "qr-card__empty-title", children: "No QR codes yet" }), _jsx("p", { className: "qr-card__empty-text", children: "Generate your first QR code to get started!" })] }) })) : (_jsx("div", { className: "qr-grid", children: qrCodes.map((qr) => {
                                const expired = expiredStatus[qr.id];
                                const status = imageStatus[qr.id] || 'loading';
                                return (_jsx("div", { className: `qr-item ${expired ? 'qr-item--expired' : ''}`, children: _jsxs("div", { className: "qr-item__content", children: [_jsxs("div", { className: `qr-item__preview ${expired ? 'qr-item__preview--expired' : ''}`, children: [status === 'loading' && (_jsxs("div", { className: "qr-item__loading", children: [_jsx(Loader2, { className: "qr-icon qr-icon--spinning" }), _jsx("span", { className: "qr-item__loading-text", children: "Loading..." })] })), status === 'error' ? (_jsxs("div", { className: "qr-item__error", children: [_jsx("div", { className: "qr-item__error-icon", children: _jsx(AlertCircle, { className: "qr-icon" }) }), _jsx("span", { className: "qr-item__error-text", children: "Load failed" }), _jsx("button", { onClick: () => setImageStatus(prev => ({ ...prev, [qr.id]: 'loading' })), className: "qr-button qr-button--primary qr-button--tiny", children: "Retry" })] })) : (_jsx("img", { src: qr.url, alt: `QR Code for ${qr.session}`, className: `qr-item__image ${status !== 'loaded' ? 'invisible' : ''} ${expired ? 'qr-item__image--expired' : ''}`, onLoad: () => setImageStatus(prev => ({ ...prev, [qr.id]: 'loaded' })), onError: () => {
                                                            console.error('Failed to load QR code:', qr.url);
                                                            setImageStatus(prev => ({ ...prev, [qr.id]: 'error' }));
                                                        }, crossOrigin: "anonymous", loading: "lazy" })), expired && (_jsx("div", { className: "qr-item__expired-badge", children: "Expired" }))] }), _jsxs("div", { className: "qr-item__details", children: [_jsxs("div", { className: "qr-item__session", children: [_jsx("p", { className: "qr-item__session-text", title: qr.session, children: qr.session }), _jsxs("div", { className: "qr-item__meta", children: [_jsxs("p", { className: "qr-item__meta-item", children: [_jsx("span", { className: "qr-item__meta-dot" }), "Created: ", qr.created_at] }), qr.expires_at && (_jsxs("p", { className: `qr-item__meta-item ${expired ? 'qr-item__meta-item--error' : 'qr-item__meta-item--success'}`, children: [_jsx("span", { className: `qr-item__meta-dot ${expired ? 'qr-item__meta-dot--error' : 'qr-item__meta-dot--success'}` }), expired ? "Expired" : "Expires", ": ", qr.expires_at] }))] })] }), _jsxs("div", { className: "qr-item__actions", children: [_jsxs("button", { onClick: () => onDownload(qr.id), disabled: status !== 'loaded', className: `qr-button qr-button--secondary qr-button--small ${status !== 'loaded' ? 'qr-button--disabled' : ''}`, children: [_jsx(Download, { className: "qr-icon" }), "Download"] }), _jsxs("button", { onClick: () => setDeleteId(qr.id), className: "qr-button qr-button--danger qr-button--small", children: [_jsx(Trash2, { className: "qr-icon" }), "Delete"] })] })] })] }) }, qr.id));
                            }) }))] }), deleteId !== null && (_jsx("div", { className: "qr-modal", children: _jsxs("div", { className: "qr-modal__content", children: [_jsxs("div", { className: "qr-modal__header", children: [_jsx("div", { className: "qr-modal__icon", children: _jsx(Trash2, { className: "qr-icon" }) }), _jsx("h2", { className: "qr-modal__title", children: "Confirm Deletion" }), _jsx("p", { className: "qr-modal__text", children: "Are you sure you want to delete this QR code? This action cannot be undone and will permanently remove the code from your collection." })] }), _jsxs("div", { className: "qr-modal__actions", children: [_jsx("button", { onClick: () => setDeleteId(null), className: "qr-button qr-button--secondary", children: "Cancel" }), _jsxs("button", { onClick: () => {
                                            onDelete(deleteId);
                                            setDeleteId(null);
                                        }, className: "qr-button qr-button--danger", children: [_jsx(Trash2, { className: "qr-icon" }), "Delete"] })] })] }) }))] }) }));
};
